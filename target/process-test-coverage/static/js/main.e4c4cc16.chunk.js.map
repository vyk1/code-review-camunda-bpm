{"version":3,"sources":["components/Viewer/BpmnViewer.tsx","theme.tsx","util/ArrayUtils.ts","util/ParsingUtils.ts","util/FileUtils.ts","components/Viewer/CoverageViewer.tsx","components/Util/Section.tsx","components/Util/Tooltip.tsx","components/Viewer/RunSummaryRow.tsx","components/Viewer/RunSummary.tsx","components/Viewer/ViewerContainer.tsx","components/App.tsx","index.tsx"],"names":["viewer","theme","createMuiTheme","palette","primary","light","main","dark","contrastText","secondary","text","hint","disabled","divider","background","paper","default","typography","fontFamily","distinct","accessor","item","value","index","array","indexOf","find","getDistinctIds","events","type","filter","event","map","definitionKey","downloadFile","name","content","element","document","createElement","setAttribute","encodeURIComponent","style","display","body","appendChild","click","removeChild","useStyles","makeStyles","root","height","overflow","modeler","highlight","fill","highlightSequenceFlow","stroke","strokeWidth","transactionBoundary","backgroundColor","borderRadius","minHeight","width","transactionBoundarySmall","executionListener","color","fontSize","padding","minWidth","textAlign","whiteSpace","getTransactionBoundaries","businessObject","loopCharacteristics","eventDefinitions","eventDefinitionType","length","$type","isWaitStateTask","isWaitStateEvent","isAsyncAfter","asyncAfter","isAsyncBefore","asyncBefore","before","after","BpmnViewer","props","classes","data","setListener","listener","useMemo","send","a","get","zoom","useEffect","Viewer","container","moddleExtensions","camunda","camundaModdleDescriptor","toggle","canvas","overlays","elementRegistry","importXML","xml","showCoverage","highlightFlowNodes","forEach","node","addMarker","highlightSequenceFlows","flow","$","addClass","elements","getAll","i","showTransactionBoundaries","transactionBoundaries","add","id","position","bottom","left","html","right","showExpressions","extensionElements","values","j","expression","conditionExpression","waypoints","y","top","$attrs","className","clsx","settings","settingsLabel","transition","transitions","create","opacity","sectionContainer","border","flexDirection","maxWidth","margin","sectionTitle","fontWeight","sectionTitleFlex","sectionTitleRight","flexGrow","viewerContainer","settingsSpacer","CoverageViewer","selectedModel","selectedRun","useState","undefined","setData","bpmnListener","setBpmnListener","setShowCoverage","setShowTransactionBoundaries","setShowExpressions","download","useCallback","key","coveredNodes","coveredSequenceFlows","FormControlLabel","label","control","Checkbox","size","checked","onChange","e","IconButton","title","onClick","ZoomIn","ZoomOut","CenterFocusStrong","CloudDownload","sectionContent","Section","children","tooltip","tooltipArrow","Tooltip","arrow","placement","summaryRow","cursor","paddingTop","paddingBottom","paddingLeft","summaryRowActive","summaryColumnName","summaryColumnCount","summaryColumnCoverage","separator","rowIcon","marginRight","spacingRow","summaryColumnNamePadding","coverageGreen","coverageYellow","coverageRed","spacingColumn","empty","playIcon","RunSummaryRow","model","selected","coverage","covered","coveredNodeCount","coveredSequenceFlowCount","icon","Code","PlaylistAddCheck","total","totalElementCount","React","toFixed","summaryTable","borderSpacing","summaryHead","paddingRight","summaryFoot","summaryColumnNamePadding1","summaryColumnNamePadding2","RunSummary","aria-hidden","selectedSuite","models","colSpan","onModelSelected","runs","run","onRunSelected","marginBottom","subtitle","marginTop","borderBottom","selectorTitle","page","selector","flexWrap","flex","itemSelected","itemTitle","itemSubtitle","selectWrapper","select","ViewerContainer","selectedModelKey","setSelectedModelKey","selectedSuiteId","setSelectedSuiteId","selectedRunId","setSelectedRunId","parsedSuites","suites","window","COVERAGE_DATA","suite","parsedModels","flatMap","modelKey","m","Error","coveredFlows","startedNodes","endedNodes","ended","reduce","prev","cur","s","r","FormControl","variant","InputLabel","Select","labelId","MenuProps","target","MenuItem","substr","lastIndexOf","App","ThemeProvider","Theme","CssBaseline","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e4c4cc16.chunk.js","sourcesContent":["import { makeStyles } from \"@material-ui/core/styles\";\nimport Viewer from \"bpmn-js/lib/NavigatedViewer\";\nimport clsx from \"clsx\";\nimport $ from \"jquery\";\nimport React, { useEffect, useMemo } from \"react\";\nimport camundaModdleDescriptor from \"camunda-bpmn-moddle/resources/camunda.json\";\n\nexport interface BpmnViewerData {\n    highlightSequenceFlows: string[];\n    highlightFlowNodes: string[];\n    xml: string;\n}\n\nexport type BpmnViewerEvent = \"RESET_ZOOM\" | \"ZOOM_IN\" | \"ZOOM_OUT\";\nexport type BpmnViewerListener = { send: (event: BpmnViewerEvent) => void };\n\ninterface Props {\n    showTransactionBoundaries: boolean;\n    showCoverage: boolean;\n    showExpressions: boolean;\n    data?: BpmnViewerData;\n    className?: string;\n    setListener?: (listener: BpmnViewerListener) => void;\n}\n\nconst useStyles = makeStyles(() => ({\n    root: {\n        height: \"640px\",\n        overflow: \"hidden\"\n    },\n    modeler: {\n        height: \"640px\"\n    },\n    highlight: {\n        \"&:not(.djs-connection) .djs-visual > :nth-child(1)\": {\n            fill: \"rgba(50, 205, 50, 0.50) !important\"\n        }\n    },\n    highlightSequenceFlow: {\n        stroke: \"rgba(20, 125, 20, 1) !important\",\n        strokeWidth: \"2px !important\"\n    },\n    transactionBoundary: {\n        backgroundColor: \"rgba(180, 21, 21, 0.7)\",\n        borderRadius: \"1px\",\n        minHeight: \"50px\",\n        width: \"4px\"\n    },\n    transactionBoundarySmall: {\n        backgroundColor: \"rgba(180, 21, 21, 0.7)\",\n        borderRadius: \"1px\",\n        minHeight: \"32px\",\n        width: \"4px\"\n    },\n    executionListener: {\n        backgroundColor: \"rgba(21, 66, 180, 0.7)\",\n        color: \"white\",\n        borderRadius: \"4px\",\n        fontFamily: \"Arial\",\n        fontSize: \"12px\",\n        padding: \"5px\",\n        minHeight: \"16px\",\n        minWidth: \"16px\",\n        textAlign: \"center\",\n        whiteSpace: \"nowrap\"\n    }\n}));\n\n// @see\n// https://github.com/bpmn-io/camunda-transaction-boundaries/blob/master/lib/TransactionBoundaries.js#L63\nconst getTransactionBoundaries = (element: any): {\n    before: boolean;\n    after: boolean;\n} => {\n    const { businessObject, loopCharacteristics } = element;\n    const eventDefinitions = businessObject.eventDefinitions || [];\n    const eventDefinitionType = eventDefinitions.length && eventDefinitions[0].$type;\n\n    const isWaitStateTask = element.type === \"bpmn:ReceiveTask\"\n        || element.type === \"bpmn:UserTask\"\n        || (element.type === \"bpmn:ServiceTask\" && businessObject.type === \"external\");\n\n    // TODO: Parallel/Inclusive Gateway with multiple incoming sequence flows\n    const isWaitStateGateway = false;\n\n    const isWaitStateEvent = element.type === \"bpmn:IntermediateCatchEvent\" && (\n        eventDefinitionType === \"bpmn:MessageEventDefinition\"\n        || eventDefinitionType === \"bpmn:TimerEventDefinition\"\n        || eventDefinitionType === \"bpmn:SignalEventDefinition\"\n        || eventDefinitionType === \"bpmn:ConditionalEventDefinition\"\n    );\n\n    const isAsyncAfter = businessObject.asyncAfter\n        || (loopCharacteristics && loopCharacteristics.asyncAfter);\n\n    const isAsyncBefore = businessObject.asyncBefore\n        || (loopCharacteristics && loopCharacteristics.asyncBefore);\n\n    const boundariesBefore = isWaitStateTask\n        || isWaitStateEvent\n        || isWaitStateGateway\n        || isAsyncBefore;\n\n    return { before: !!boundariesBefore, after: !!isAsyncAfter };\n};\n\nlet viewer: Viewer | undefined;\n\nconst BpmnViewer: React.FC<Props> = props => {\n    const classes = useStyles();\n\n    const { data, setListener } = props;\n    const listener: BpmnViewerListener = useMemo(() => ({\n        send: async (event: BpmnViewerEvent) => {\n            switch (event) {\n                case \"RESET_ZOOM\": {\n                    viewer?.get(\"canvas\").zoom(\"fit-viewport\", true);\n                    break;\n                }\n                case \"ZOOM_IN\": {\n                    viewer?.get(\"zoomScroll\").zoom(1);\n                    break;\n                }\n                case \"ZOOM_OUT\": {\n                    viewer?.get(\"zoomScroll\").zoom(-1);\n                    break;\n                }\n                default: {\n                    // Do nothing\n                }\n            }\n        }\n    }), []);\n\n    useEffect(() => {\n        setListener && setListener(listener);\n    }, [setListener, listener]);\n\n    useEffect(() => {\n        viewer = new Viewer({\n            container: \"#bpmn-canvas\",\n            moddleExtensions: {\n                camunda: camundaModdleDescriptor\n            }\n        });\n        viewer.get(\"zoomScroll\").toggle(false);\n    }, []);\n\n    useEffect(() => {\n        (async () => {\n            if (viewer && data) {\n                const canvas = viewer.get(\"canvas\");\n                const overlays = viewer.get(\"overlays\");\n                const elementRegistry = viewer.get(\"elementRegistry\");\n\n                await viewer.importXML(data.xml);\n\n                // zoom to fit full viewport\n                canvas.zoom(\"fit-viewport\", true);\n\n                if (props.showCoverage) {\n                    data.highlightFlowNodes?.forEach(node => {\n                        canvas.addMarker(node, classes.highlight);\n                    });\n\n                    data.highlightSequenceFlows?.forEach(flow => {\n                        $(`g[data-element-id='${flow}']`)\n                            .find(\"path\")\n                            .addClass(classes.highlightSequenceFlow);\n                    });\n                }\n\n                // visualizations\n                const elements = elementRegistry.getAll();\n                for (let i = 0; i < elements.length; i++) {\n                    const element = elements[i];\n                    if (element.type !== \"label\") {\n                        if (props.showTransactionBoundaries) {\n                            const transactionBoundaries = getTransactionBoundaries(element);\n                            if (transactionBoundaries.before) {\n                                overlays.add(element.id, \"note\", {\n                                    position: {\n                                        bottom: (element.type === \"bpmn:IntermediateCatchEvent\" ? 34 : 64),\n                                        left: (element.type === \"bpmn:IntermediateCatchEvent\" ? -3 : -5)\n                                    },\n                                    html: `<div class='${element.type === \"bpmn:IntermediateCatchEvent\" ? classes.transactionBoundarySmall : classes.transactionBoundary}' />`\n                                });\n                            }\n                            if (transactionBoundaries.after) {\n                                overlays.add(element.id, \"note\", {\n                                    position: {\n                                        bottom: 64,\n                                        right: -1\n                                    },\n                                    html: `<div class='${classes.transactionBoundary}' />`\n                                });\n                            }\n                        }\n\n                        if (props.showExpressions) {\n                            if (element.businessObject.extensionElements) {\n                                const extensionElements = element\n                                    .businessObject.extensionElements.values;\n                                for (let j = 0; j < extensionElements.length; j++) {\n                                    if (extensionElements[j].$type === \"camunda:executionListener\") {\n                                        if (extensionElements[j].event === \"end\") {\n                                            overlays.add(element.id, \"note\", {\n                                                position: {\n                                                    bottom: 0,\n                                                    right: 0\n                                                },\n                                                html: `<div class='${classes.executionListener}'>${extensionElements[j].expression}</div>`\n                                            });\n                                        }\n                                        if (extensionElements[j].event === \"start\") {\n                                            overlays.add(element.id, \"note\", {\n                                                position: {\n                                                    bottom: 0,\n                                                    left: 0\n                                                },\n                                                html: `<div class='${classes.executionListener}'>${extensionElements[j].expression}</div>`\n                                            });\n                                        }\n                                    }\n                                }\n                            }\n\n                            if (element.type === \"bpmn:SequenceFlow\"\n                                && element.businessObject.conditionExpression) {\n                                const position = {\n                                    left: 0\n                                } as {\n                                    left: number,\n                                    top: number | undefined,\n                                    bottom: number | undefined\n                                };\n                                if (element.waypoints[0].y\n                                    > element.waypoints[element.waypoints.length - 1].y) {\n                                    position.top = -29;\n                                } else {\n                                    position.bottom = -3;\n                                }\n                                overlays.add(element.id, \"note\", {\n                                    position: position,\n                                    html: `<div class='${classes.executionListener}'>${element.businessObject.conditionExpression.body}</div>`\n                                });\n                            }\n\n                            if (element.businessObject.$attrs[\"camunda:delegateExpression\"]) {\n                                overlays.add(element.id, \"note\", {\n                                    position: {\n                                        bottom: -3,\n                                        left: 0\n                                    },\n                                    html: `<div class='${classes.executionListener}'>${element.businessObject.$attrs[\"camunda:delegateExpression\"]}</div>`\n                                });\n                            }\n                        }\n                    }\n                }\n            }\n        })();\n    }, [data, classes, props.showCoverage, props.showExpressions, props.showTransactionBoundaries]);\n\n    return (\n        <div className={clsx(classes.root, props.className)}>\n            <div className={classes.modeler} id=\"bpmn-canvas\" />\n        </div>\n    );\n};\n\nexport default BpmnViewer;\n","import { createMuiTheme } from \"@material-ui/core/styles\";\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            light: \"#32d35c\",\n            main: \"#26b44b\",\n            dark: \"#3d9a4c\",\n            contrastText: \"#fff\"\n        },\n        secondary: {\n            light: \"#455a64\",\n            main: \"#37474f\",\n            dark: \"#263238\",\n            contrastText: \"#fff\"\n        },\n        text: {\n            primary: \"rgba(0, 0, 0, 0.87)\",\n            secondary: \"rgba(0, 0, 0, 0.6)\",\n            hint: \"rgba(0, 0, 0, 0.38)\",\n            disabled: \"rgba(0, 0, 0, 0.38)\"\n        },\n        divider: \"rgba(34, 36, 38, 0.1)\",\n        background: {\n            paper: \"rgba(34, 36, 38, 0.1)\",\n            default: \"#FFFFFF\"\n        }\n    },\n    typography: {\n        fontFamily: \"Helvetica, Arial, sans-serif\"\n    }\n});\n\nexport default theme;\n","const distinct = <T>(accessor: (item: T) => unknown = item => item) => (\n    (value: T, index: number, array: T[]): boolean => (\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        array.indexOf(array.find(item => accessor(item) === accessor(value))!) === index\n    )\n);\n\nexport default distinct;\n","import {\n    CoveredNode,\n    Event,\n    EventType,\n    Model,\n    ParsedModel,\n    ParsedRun,\n    ParsedSuite,\n    Suite\n} from \"../api/api\";\nimport distinct from \"./ArrayUtils\";\n\nexport const getDistinctIds = (events: Event[], type: EventType): string[] => (\n    events\n        .filter(event => event.type === type)\n        .map(event => event.definitionKey)\n        .filter(distinct())\n);\n\nexport const parseSuites = (suites: Suite[], models: Model[]): ParsedSuite[] => (\n    suites.map(suite => {\n        const modelKeys = suite.runs\n            .flatMap(run => run.events)\n            .map(event => event.modelKey)\n            .filter(distinct());\n\n        const parsedModels: ParsedModel[] = modelKeys\n            .map(modelKey => {\n                const model = models.find(m => m.key === modelKey);\n\n                if (!model) {\n                    throw new Error(`Could not find required model with key ${modelKey}`);\n                }\n\n                const runs: ParsedRun[] = suite.runs.map(run => {\n                    const events = run.events.filter(event => event.modelKey === modelKey);\n                    const coveredFlows = getDistinctIds(events, \"TAKE\");\n                    const startedNodes = getDistinctIds(events, \"START\");\n                    const endedNodes = getDistinctIds(events, \"END\");\n                    const coveredNodes: CoveredNode[] = startedNodes.map(id => ({\n                        id: id,\n                        ended: endedNodes.indexOf(id) !== -1\n                    }));\n\n                    return {\n                        id: run.id,\n                        name: run.name,\n                        totalElementCount: model.totalElementCount,\n                        coveredNodes: coveredNodes,\n                        coveredNodeCount: coveredNodes.length,\n                        coveredSequenceFlows: coveredFlows,\n                        coveredSequenceFlowCount: coveredFlows.length,\n                        coverage: (coveredNodes.length + coveredFlows.length)\n                            / model.totalElementCount\n                    };\n                });\n\n                const coveredFlows = runs\n                    .flatMap(run => run.coveredSequenceFlows)\n                    .filter(distinct());\n                const coveredNodes = runs\n                    .flatMap(run => run.coveredNodes)\n                    .filter(distinct((item: CoveredNode) => item.id));\n\n                return {\n                    id: model.id,\n                    key: model.key,\n                    xml: model.xml,\n                    runs: runs,\n                    coveredSequenceFlows: coveredFlows,\n                    coveredSequenceFlowCount: coveredFlows.length,\n                    coveredNodes: coveredNodes,\n                    coveredNodeCount: coveredNodes.length,\n                    totalElementCount: model.totalElementCount,\n                    coverage: (coveredNodes.length + coveredFlows.length) / model.totalElementCount\n                };\n            });\n\n        const coveredFlows = parsedModels\n            .flatMap(run => run.coveredSequenceFlows)\n            .filter(distinct());\n        const coveredNodes = parsedModels\n            .flatMap(run => run.coveredNodes)\n            .filter(distinct((item: CoveredNode) => item.id));\n        const totalElementCount = parsedModels.reduce(\n            (prev, cur) => prev + cur.totalElementCount, 0\n        );\n\n        return {\n            id: suite.id,\n            name: suite.name,\n            models: parsedModels,\n            coveredSequenceFlows: coveredFlows,\n            coveredSequenceFlowCount: coveredFlows.length,\n            coveredNodes: coveredNodes,\n            coveredNodeCount: coveredNodes.length,\n            totalElementCount: totalElementCount,\n            coverage: (coveredNodes.length + coveredFlows.length) / totalElementCount\n        };\n    })\n);\n","export const downloadFile = (name: string, content: string): void => {\n    const element = document.createElement(\"a\");\n    element.setAttribute(\"href\", `data:text/plain;charset=utf-8,${encodeURIComponent(content)}`);\n    element.setAttribute(\"download\", name);\n    element.style.display = \"none\";\n    document.body.appendChild(element);\n    element.click();\n    document.body.removeChild(element);\n};\n\nexport default {\n    downloadFile\n};\n","import { Checkbox, FormControlLabel, IconButton, Theme } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { CenterFocusStrong, CloudDownload, ZoomIn, ZoomOut } from \"@material-ui/icons\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { ParsedModel, ParsedRun } from \"../../api/api\";\nimport { downloadFile } from \"../../util/FileUtils\";\nimport BpmnViewer, { BpmnViewerData, BpmnViewerListener } from \"./BpmnViewer\";\n\ninterface Props {\n    selectedModel: ParsedModel | undefined;\n    selectedRun: ParsedRun | undefined;\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    settings: {\n        zoom: 0.85,\n        padding: \"0.5rem 0.5rem 0rem 1rem\",\n        display: \"flex\"\n    },\n    settingsLabel: {\n        transition: theme.transitions.create(\"opacity\"),\n        opacity: 0.38,\n        \"&:hover\": {\n            opacity: 0.87\n        }\n    },\n    sectionContainer: {\n        border: \"2px solid rgba(34, 36, 38, 0.1)\",\n        backgroundColor: \"rgba(255, 255, 255, 0.54)\",\n        borderRadius: \"4px\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        maxWidth: \"960px\",\n        width: \"100%\",\n        margin: \"2rem auto 0rem auto\"\n    },\n    sectionTitle: {\n        height: \"36px\",\n        padding: \"0.5rem\",\n        backgroundColor: \"rgba(34, 36, 38, 0.1)\",\n        display: \"block\",\n        width: \"100%\",\n        fontWeight: 500\n    },\n    sectionTitleFlex: {\n        display: \"flex\"\n    },\n    sectionTitleRight: {\n        flexGrow: 1,\n        textAlign: \"right\",\n        color: theme.palette.text.hint\n    },\n    viewer: {\n        height: \"640px\",\n        width: \"100%\"\n    },\n    viewerContainer: {\n        position: \"relative\",\n        height: \"640px\",\n        \"&>div\": {\n            position: \"absolute\"\n        }\n    },\n    settingsSpacer: {\n        flexGrow: 1\n    }\n}));\n\nconst CoverageViewer: React.FC<Props> = props => {\n    const classes = useStyles();\n\n    const { selectedModel, selectedRun } = props;\n\n    const [data, setData] = useState<BpmnViewerData | undefined>(undefined);\n    const [bpmnListener, setBpmnListener] = useState<BpmnViewerListener | undefined>(undefined);\n\n    const [showCoverage, setShowCoverage] = useState(true);\n    const [showTransactionBoundaries, setShowTransactionBoundaries] = useState(false);\n    const [showExpressions, setShowExpressions] = useState(false);\n\n    const download = useCallback(() => {\n        if (selectedModel) {\n            downloadFile(`${selectedModel.key}.bpmn`, selectedModel.xml);\n        }\n    }, [selectedModel]);\n\n    useEffect(() => {\n        if (selectedRun && selectedModel) {\n            setData({\n                xml: selectedModel.xml,\n                highlightFlowNodes: selectedRun.coveredNodes.map(node => node.id),\n                highlightSequenceFlows: selectedRun.coveredSequenceFlows\n            });\n        } else if (selectedModel) {\n            setData({\n                xml: selectedModel.xml,\n                highlightFlowNodes: selectedModel.coveredNodes.map(node => node.id),\n                highlightSequenceFlows: selectedModel.coveredSequenceFlows\n            });\n        } else {\n            setData(undefined);\n        }\n    }, [selectedModel, selectedRun]);\n\n    if (!selectedModel) {\n        return null;\n    }\n\n    return (\n        <>\n            <div className={classes.sectionContainer}>\n                <div className={classes.sectionTitle}>\n                    <span>Model Viewer</span>\n                </div>\n                <div className={classes.settings}>\n\n                    <FormControlLabel\n                        label=\"Show Coverage\"\n                        className={classes.settingsLabel}\n                        control={(\n                            <Checkbox\n                                size=\"small\"\n                                color=\"primary\"\n                                checked={showCoverage}\n                                onChange={(e, checked) => setShowCoverage(checked)}\n                                name=\"ShowCoverage\" />\n                        )} />\n\n                    <FormControlLabel\n                        label=\"Show Transaction Boundaries\"\n                        className={classes.settingsLabel}\n                        control={(\n                            <Checkbox\n                                size=\"small\"\n                                color=\"primary\"\n                                checked={showTransactionBoundaries}\n                                onChange={(e, checked) => setShowTransactionBoundaries(checked)}\n                                name=\"ShowTransactionBoundaries\" />\n                        )} />\n\n                    <FormControlLabel\n                        label=\"Show Expressions\"\n                        className={classes.settingsLabel}\n                        control={(\n                            <Checkbox\n                                size=\"small\"\n                                color=\"primary\"\n                                checked={showExpressions}\n                                onChange={(e, checked) => setShowExpressions(checked)}\n                                name=\"ShowExpressions\" />\n                        )} />\n\n                    <div className={classes.settingsSpacer} />\n\n                    <IconButton\n                        title=\"Zoom In\"\n                        onClick={() => bpmnListener?.send(\"ZOOM_IN\")}>\n                        <ZoomIn />\n                    </IconButton>\n\n                    <IconButton\n                        title=\"Zoom Out\"\n                        onClick={() => bpmnListener?.send(\"ZOOM_OUT\")}>\n                        <ZoomOut />\n                    </IconButton>\n\n                    <IconButton\n                        title=\"Reset Zoom\"\n                        onClick={() => bpmnListener?.send(\"RESET_ZOOM\")}>\n                        <CenterFocusStrong />\n                    </IconButton>\n\n                    <IconButton\n                        disabled={!selectedModel}\n                        title=\"Download BPMN\"\n                        onClick={download}>\n                        <CloudDownload />\n                    </IconButton>\n\n                </div>\n\n                <div className={classes.viewerContainer}>\n                    <BpmnViewer\n                        className={classes.viewer}\n                        showCoverage={showCoverage}\n                        showExpressions={showExpressions}\n                        showTransactionBoundaries={showTransactionBoundaries}\n                        setListener={setBpmnListener}\n                        data={data} />\n                </div>\n\n            </div>\n        </>\n    );\n};\n\nexport default CoverageViewer;\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport React from \"react\";\n\ninterface Props {\n    title: string;\n}\n\nconst useStyles = makeStyles(() => ({\n    sectionContainer: {\n        border: \"2px solid rgba(34, 36, 38, 0.1)\",\n        backgroundColor: \"rgba(255, 255, 255, 0.54)\",\n        borderRadius: \"4px\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        maxWidth: \"960px\",\n        width: \"100%\",\n        margin: \"1rem auto 0rem auto\"\n    },\n    sectionTitle: {\n        height: \"36px\",\n        padding: \"0.5rem\",\n        backgroundColor: \"rgba(34, 36, 38, 0.1)\",\n        display: \"block\",\n        width: \"100%\",\n        fontWeight: 500\n    },\n    sectionContent: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        padding: \"1rem\"\n    }\n}));\n\nconst Section: React.FC<Props> = props => {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.sectionContainer}>\n\n            <span className={classes.sectionTitle}>\n                {props.title}\n            </span>\n\n            <div className={classes.sectionContent}>\n                {props.children}\n            </div>\n\n        </div>\n    );\n};\n\nexport default Section;\n","import { Tooltip as MaterialTooltip } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport React from \"react\";\n\ndeclare type Placement =\n    | \"bottom-end\"\n    | \"bottom-start\"\n    | \"bottom\"\n    | \"left-end\"\n    | \"left-start\"\n    | \"left\"\n    | \"right-end\"\n    | \"right-start\"\n    | \"right\"\n    | \"top-end\"\n    | \"top-start\"\n    | \"top\";\n\ninterface Props {\n    title: string;\n    placement?: Placement;\n}\n\nconst useStyles = makeStyles(() => ({\n    tooltip: {\n        fontSize: \"0.85rem\",\n        backgroundColor: \"rgba(0, 0, 0, 0.87)\"\n    },\n    tooltipArrow: {\n        color: \"rgba(0, 0, 0, 0.87)\"\n    },\n}));\n\nconst Tooltip: React.FC<Props> = props => {\n    const classes = useStyles();\n\n    return (\n        <MaterialTooltip\n            title={props.title}\n            arrow\n            placement={props.placement || \"top\"}\n            classes={{\n                arrow: classes.tooltipArrow,\n                tooltip: classes.tooltip\n            }}>\n            <span>{props.children}</span>\n        </MaterialTooltip>\n    );\n};\n\nexport default Tooltip;\n","import { Theme } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Code, PlaylistAddCheck } from \"@material-ui/icons\";\nimport clsx from \"clsx\";\nimport React from \"react\";\nimport { ParsedModel, ParsedRun } from \"../../api/api\";\n\ninterface Props {\n    selected: boolean;\n    type: \"model\" | \"run\";\n    model: ParsedModel | ParsedRun;\n    onClick: () => void;\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    summaryRow: {\n        cursor: \"pointer\",\n        transition: theme.transitions.create(\"background-color\"),\n        \"&:hover\": {\n            backgroundColor: \"rgba(34, 36, 38, 0.1)\"\n        },\n        \"&>td\": {\n            paddingTop: \"0.5rem\",\n            paddingBottom: \"0.5rem\"\n        },\n        \"&>td:first-child\": {\n            paddingLeft: \"1rem\"\n        }\n    },\n    summaryRowActive: {\n        backgroundColor: \"rgba(34, 36, 38, 0.15)\",\n        \"&>td\": {\n            fontWeight: 500\n        },\n        \"&:hover\": {\n            backgroundColor: \"rgba(34, 36, 38, 0.15)\"\n        }\n    },\n    summaryColumnName: {\n        textAlign: \"left\",\n        display: \"flex\"\n    },\n    summaryColumnCount: {\n        textAlign: \"right\"\n    },\n    summaryColumnCoverage: {\n        textAlign: \"right\",\n        width: \"1%\",\n        paddingLeft: \"1rem\"\n    },\n    separator: {\n        margin: \"0 0.25rem\"\n    },\n    rowIcon: {\n        marginRight: \"0.5rem\"\n    },\n    spacingRow: {\n        \"&>td\": {\n            padding: \"0.25rem\"\n        }\n    },\n    summaryColumnNamePadding: {\n        paddingLeft: \"2.75rem !important\"\n    },\n    coverageGreen: {\n        backgroundColor: \"rgba(0, 255, 0, 0.38)\"\n    },\n    coverageYellow: {\n        backgroundColor: \"rgba(255, 255, 0, 0.38)\"\n    },\n    coverageRed: {\n        backgroundColor: \"rgba(255, 0, 0, 0.38)\"\n    },\n    spacingColumn: {\n        width: \"3rem\"\n    },\n    empty: {\n        padding: \"1rem\",\n        textAlign: \"center\",\n        fontWeight: \"bold\"\n    },\n    playIcon: {\n        color: theme.palette.primary.main\n    }\n}));\n\nconst RunSummaryRow: React.FC<Props> = props => {\n    const classes = useStyles();\n\n    const { type, model, onClick, selected } = props;\n\n    const data = {\n        coverage: model.coverage,\n        covered: model.coveredNodeCount + model.coveredSequenceFlowCount,\n        icon: type === \"model\" ? Code : PlaylistAddCheck,\n        name: type === \"model\" ? (model as ParsedModel).key : (model as ParsedRun).name,\n        total: model.totalElementCount\n    };\n\n    return (\n        <tr\n            onClick={onClick}\n            className={clsx(\n                classes.summaryRow,\n                selected && classes.summaryRowActive\n            )}>\n            <td className={clsx(\n                classes.summaryColumnName,\n                type === \"run\" && classes.summaryColumnNamePadding,\n            )}>\n                {React.createElement(data.icon, {\n                    className: classes.rowIcon,\n                    fontSize: \"small\"\n                })}\n                {data.name}\n            </td>\n            <td className={classes.summaryColumnCount}>{data.covered}</td>\n            <td className={classes.summaryColumnCount}>{data.total}</td>\n            <td className={classes.spacingColumn} />\n            <td className={clsx(classes.summaryColumnCoverage, {\n                [classes.coverageGreen]: data.coverage >= 0.9,\n                [classes.coverageYellow]: data.coverage < 0.9 && data.coverage >= 0.5,\n                [classes.coverageRed]: data.coverage < 0.5\n            })}>\n                {`${(data.coverage * 100).toFixed(2)}%`}\n            </td>\n        </tr>\n    );\n};\n\nexport default RunSummaryRow;\n","import { Theme } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport React from \"react\";\nimport { ParsedModel, ParsedRun, ParsedSuite } from \"../../api/api\";\nimport Section from \"../Util/Section\";\nimport Tooltip from \"../Util/Tooltip\";\nimport RunSummaryRow from \"./RunSummaryRow\";\n\ninterface Props {\n    selectedSuite: ParsedSuite;\n    selectedModel: ParsedModel | undefined;\n    selectedRun: ParsedRun | undefined;\n    onModelSelected: (model: ParsedModel) => void;\n    onRunSelected: (run: ParsedRun) => void;\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    summaryTable: {\n        borderSpacing: \"0px !important\"\n    },\n    summaryHead: {\n        backgroundColor: \"rgba(34, 36, 38, 0.05)\",\n        \"&>th\": {\n            paddingTop: \"1rem\",\n            paddingBottom: \"1rem\"\n        },\n        \"&>th:first-child\": {\n            paddingLeft: \"1rem\"\n        },\n        \"&>th:last-child\": {\n            paddingRight: \"1rem\"\n        }\n    },\n    summaryRow: {\n        cursor: \"pointer\",\n        transition: theme.transitions.create(\"background-color\"),\n        \"&:hover\": {\n            backgroundColor: \"rgba(34, 36, 38, 0.1)\"\n        },\n        \"&>td\": {\n            paddingTop: \"0.5rem\",\n            paddingBottom: \"0.5rem\"\n        },\n        \"&>td:first-child\": {\n            paddingLeft: \"1rem\"\n        },\n        \"&>td:last-child\": {\n            paddingRight: \"1rem\"\n        }\n    },\n    summaryRowActive: {\n        backgroundColor: \"rgba(34, 36, 38, 0.15)\",\n        \"&>td\": {\n            fontWeight: 500\n        },\n        \"&:hover\": {\n            backgroundColor: \"rgba(34, 36, 38, 0.15)\"\n        }\n    },\n    summaryFoot: {\n        backgroundColor: \"rgba(0, 0, 0, 0.05)\",\n        fontWeight: 500,\n        \"&>td\": {\n            paddingTop: \"1rem\",\n            paddingBottom: \"1rem\"\n        },\n        \"&>td:first-child\": {\n            paddingLeft: \"1rem\"\n        },\n        \"&>td:last-child\": {\n            paddingRight: \"1rem\"\n        }\n    },\n    summaryColumnCount: {\n        textAlign: \"right\"\n    },\n    summaryColumnCoverage: {\n        textAlign: \"right\",\n        width: \"1%\",\n        paddingLeft: \"1rem\"\n    },\n    separator: {\n        margin: \"0 0.25rem\"\n    },\n    rowIcon: {\n        marginRight: \"0.5rem\"\n    },\n    spacingRow: {\n        \"&>td\": {\n            padding: \"0.25rem\"\n        }\n    },\n    summaryColumnNamePadding1: {\n        paddingLeft: \"2.75rem !important\"\n    },\n    summaryColumnNamePadding2: {\n        paddingLeft: \"4.5rem !important\"\n    },\n    coverageGreen: {\n        backgroundColor: \"rgba(0, 255, 0, 0.38)\"\n    },\n    coverageYellow: {\n        backgroundColor: \"rgba(255, 255, 0, 0.38)\"\n    },\n    coverageRed: {\n        backgroundColor: \"rgba(255, 0, 0, 0.38)\"\n    },\n    spacingColumn: {\n        width: \"3rem\"\n    },\n    empty: {\n        padding: \"1rem\",\n        textAlign: \"center\",\n        fontWeight: \"bold\"\n    }\n}));\n\nconst RunSummary: React.FC<Props> = props => {\n    const classes = useStyles();\n\n    return (\n        <Section title=\"Build Summary\">\n            <table className={classes.summaryTable}>\n\n                <thead>\n                    <tr className={classes.summaryHead}>\n                        <th aria-hidden />\n                        <th className={classes.summaryColumnCount}>\n                            <Tooltip title=\"Covered Flow Nodes &amp; Sequence Flows\">\n                                <span>Covered</span>\n                            </Tooltip>\n                        </th>\n                        <th className={classes.summaryColumnCount}>\n                            <Tooltip title=\"Total Flow Nodes &amp; Sequence Flows\">\n                                <span>Total</span>\n                            </Tooltip>\n                        </th>\n                        <th className={classes.spacingColumn} aria-hidden />\n                        <th className={classes.summaryColumnCoverage}>Coverage</th>\n                    </tr>\n                </thead>\n\n                <tbody>\n\n                    <tr className={classes.spacingRow} key=\"spacing1\">\n                        <td />\n                    </tr>\n\n                    {props.selectedSuite.models.length === 0 && (\n                        <tr>\n                            <td\n                                className={classes.empty}\n                                colSpan={99}>\n                                This suite contains no models.\n                            </td>\n                        </tr>\n                    )}\n\n                    {props.selectedSuite.models.map(model => (\n                        <>\n                            <RunSummaryRow\n                                type=\"model\"\n                                selected={props.selectedModel === model}\n                                key={model.key}\n                                model={model}\n                                onClick={() => props.onModelSelected(model)} />\n\n                            {props.selectedModel === model && model.runs.map(run => (\n                                <RunSummaryRow\n                                    type=\"run\"\n                                    selected={props.selectedRun === run}\n                                    key={run.id}\n                                    model={run}\n                                    onClick={() => props.onRunSelected(run)} />\n                            ))}\n                        </>\n                    ))}\n\n                    <tr className={classes.spacingRow} key=\"spacing2\">\n                        <td />\n                    </tr>\n                </tbody>\n            </table>\n        </Section>\n    );\n};\n\nexport default RunSummary;\n","import { FormControl, InputLabel, MenuItem, Select } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport clsx from \"clsx\";\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport { parseSuites } from \"../../util/ParsingUtils\";\nimport CoverageViewer from \"./CoverageViewer\";\nimport RunSummary from \"./RunSummary\";\n\nconst useStyles = makeStyles(() => ({\n    title: {\n        fontSize: \"2rem\",\n        marginBottom: 0\n    },\n    subtitle: {\n        marginTop: \"0.25rem\",\n        paddingBottom: \"0.5rem\",\n        marginBottom: \"1.5rem\",\n        borderBottom: \"2px solid #666\"\n    },\n    selectorTitle: {\n        fontWeight: \"bold\",\n        fontSize: \"1rem\",\n        marginTop: \"0.5rem\"\n    },\n    page: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        width: \"960px\",\n        maxWidth: \"960px\",\n        margin: \"2rem auto 1rem auto\"\n    },\n    selector: {\n        display: \"flex\",\n        flexWrap: \"wrap\",\n        padding: \"0.5rem 0\",\n        flexDirection: \"row\"\n    },\n    item: {\n        flex: \"0 0 calc((100% - 2.25rem)/4)\",\n        marginBottom: \"0.75rem\",\n        marginRight: \"0.75rem\",\n        borderRadius: \"0.25rem\",\n        color: \"black\",\n        border: \"2px solid darkgreen\",\n        display: \"flex\",\n        padding: \"0.5rem\",\n        flexDirection: \"column\",\n        cursor: \"pointer\",\n        \"&>span\": {\n            whiteSpace: \"nowrap\"\n        },\n        \"&:nth-child(4n)\": {\n            marginRight: 0\n        }\n    },\n    itemSelected: {\n        backgroundColor: \"darkgreen\",\n        color: \"white\"\n    },\n    itemTitle: {\n        fontWeight: \"bold\",\n        marginBottom: \"0.25rem\"\n    },\n    itemSubtitle: {\n        fontSize: \"0.75rem\"\n    },\n    selectWrapper: {\n        display: \"flex\",\n        marginTop: \"0.5rem\",\n        marginBottom: \"2rem\"\n    },\n    select: {\n        width: \"calc((100% - 1rem) / 3)\",\n        marginRight: \"0.5rem\",\n        \"&:last-child\": {\n            marginRight: 0\n        }\n    },\n    hint: {\n        fontSize: \"1.5rem\",\n        textAlign: \"center\",\n        marginTop: \"1rem\",\n        marginBottom: \"1rem\",\n        fontWeight: \"bold\"\n    },\n    paper: {\n        backgroundColor: \"white\"\n    }\n}));\n\nconst ViewerContainer: React.FC = () => {\n    const classes = useStyles();\n\n    const [selectedModelKey, setSelectedModelKey] = useState<string | undefined>(undefined);\n    const [selectedSuiteId, setSelectedSuiteId] = useState<string | undefined>(undefined);\n    const [selectedRunId, setSelectedRunId] = useState<string | undefined>(undefined);\n\n    const parsedSuites = useMemo(\n        () => parseSuites(window.COVERAGE_DATA.suites, window.COVERAGE_DATA.models),\n        [window.COVERAGE_DATA]\n    );\n\n    const selectedSuite = useMemo(\n        () => parsedSuites.find(s => s.id === selectedSuiteId),\n        [parsedSuites, selectedSuiteId]\n    );\n\n    const selectedModel = useMemo(\n        () => selectedSuite?.models.find(m => m.key === selectedModelKey),\n        [selectedSuite, selectedModelKey]\n    );\n\n    const selectedRun = useMemo(\n        () => selectedModel?.runs.find(r => r.id === selectedRunId),\n        [selectedModel, selectedRunId]\n    );\n\n    // Reset model and run id on suite changed\n    useEffect(() => {\n        setSelectedModelKey(undefined);\n        setSelectedRunId(undefined);\n    }, [selectedSuiteId]);\n\n    // Reset run id on model changed\n    useEffect(() => {\n        setSelectedRunId(undefined);\n    }, [selectedModelKey]);\n\n    return (\n        <div className={classes.page}>\n\n            <h1 className={classes.title}>Test Coverage Report</h1>\n\n            <span className={classes.subtitle}>\n                {`${window.COVERAGE_DATA.suites.length} Suites, ${window.COVERAGE_DATA.models.length} Models processed.`}\n            </span>\n\n            {selectedSuite && (\n                <div className={classes.selectWrapper}>\n                    <FormControl\n                        className={classes.select}\n                        size=\"small\"\n                        color=\"primary\"\n                        variant=\"outlined\">\n\n                        <InputLabel id=\"test-suite\">\n                            Test Suite\n                        </InputLabel>\n\n                        <Select\n                            label=\"Test Suite\"\n                            value={selectedSuiteId}\n                            labelId=\"test-suite\"\n                            MenuProps={{ classes: { paper: classes.paper } }}\n                            onChange={e => setSelectedSuiteId(e.target.value as string)}>\n\n                            {parsedSuites.map(suite => (\n                                <MenuItem\n                                    key={suite.id}\n                                    value={suite.id}>\n                                    {suite.name.substr(suite.name.lastIndexOf(\".\") + 1)}\n                                </MenuItem>\n                            ))}\n\n                        </Select>\n                    </FormControl>\n\n                    {selectedModel && (\n                        <>\n\n                            <FormControl\n                                className={classes.select}\n                                size=\"small\"\n                                color=\"primary\"\n                                variant=\"outlined\">\n\n                                <InputLabel id=\"model\">\n                                    Model\n                                </InputLabel>\n\n                                <Select\n                                    label=\"Model\"\n                                    value={selectedModelKey}\n                                    labelId=\"model\"\n                                    MenuProps={{ classes: { paper: classes.paper } }}\n                                    onChange={e => setSelectedModelKey(e.target.value as string)}>\n\n                                    {selectedSuite.models.map(model => (\n                                        <MenuItem\n                                            key={model.key}\n                                            value={model.key}>\n                                            {model.key}\n                                        </MenuItem>\n                                    ))}\n\n                                </Select>\n                            </FormControl>\n\n                            <FormControl\n                                className={classes.select}\n                                size=\"small\"\n                                color=\"primary\"\n                                variant=\"outlined\">\n\n                                <InputLabel id=\"run\">\n                                    Run\n                                </InputLabel>\n\n                                <Select\n                                    label=\"Run\"\n                                    value={selectedRunId === undefined ? \"\" : selectedRunId}\n                                    labelId=\"run\"\n                                    MenuProps={{ classes: { paper: classes.paper } }}\n                                    onChange={e => setSelectedRunId(e.target.value === \"\" ? undefined : e.target.value as string)}>\n\n                                    <MenuItem value=\"\"><em>None</em></MenuItem>\n                                    {selectedModel.runs.map(run => (\n                                        <MenuItem\n                                            key={run.id}\n                                            value={run.id}>\n                                            {run.name}\n                                        </MenuItem>\n                                    ))}\n\n                                </Select>\n                            </FormControl>\n                        </>\n                    )}\n                </div>\n            )}\n\n            {!selectedSuite && (\n                <>\n                    <div className={classes.selector}>\n                        {parsedSuites.map(suite => (\n                            <div\n                                onClick={() => setSelectedSuiteId(suite.id)}\n                                className={clsx(\n                                    classes.item,\n                                    selectedSuiteId === suite.id && classes.itemSelected\n                                )}>\n                                <span className={classes.itemTitle}>\n                                    {suite.name.substr(suite.name.lastIndexOf(\".\") + 1)}\n                                </span>\n                                <span className={classes.itemSubtitle}>\n                                    {`${(suite.coverage * 100).toFixed(2)}% Coverage`}\n                                </span>\n                            </div>\n                        ))}\n                    </div>\n                    <div className={classes.hint}>\n                        Please select a test suite to see details.\n                    </div>\n                </>\n            )}\n\n            {selectedSuite && !selectedModel && (\n                <>\n                    <div className={classes.selector}>\n                        {selectedSuite.models.map(model => (\n                            <div\n                                onClick={() => setSelectedModelKey(model.key)}\n                                className={clsx(\n                                    classes.item,\n                                    selectedModelKey === model.key && classes.itemSelected\n                                )}>\n                                <span className={classes.itemTitle}>\n                                    {model.key}\n                                </span>\n                                <span className={classes.itemSubtitle}>\n                                    {`Coverage: ${(model.coverage * 100).toFixed(2)}%`}\n                                </span>\n                            </div>\n                        ))}\n                    </div>\n                    <div className={classes.hint}>\n                        Please select a model to see details.\n                    </div>\n                </>\n            )}\n\n            {selectedSuite && selectedModel && !selectedRun && (\n                <>\n                    <div className={classes.selectorTitle}>\n                        Select a run to see details for that run.\n                    </div>\n                    <div className={classes.selector}>\n                        {selectedModel.runs.map(run => (\n                            <div\n                                onClick={() => setSelectedRunId(run.id)}\n                                className={clsx(\n                                    classes.item,\n                                    selectedRunId === run.id && classes.itemSelected\n                                )}>\n                                <span className={classes.itemTitle}>\n                                    {run.name}\n                                </span>\n                                <span className={classes.itemSubtitle}>\n                                    {`Coverage: ${(run.coverage * 100).toFixed(2)}%`}\n                                </span>\n                            </div>\n                        ))}\n                    </div>\n                </>\n            )}\n\n            {selectedSuite && selectedModel && (\n                <CoverageViewer\n                    selectedModel={selectedModel}\n                    selectedRun={selectedRun} />\n            )}\n\n            {selectedSuite && (\n                <RunSummary\n                    selectedSuite={selectedSuite}\n                    selectedModel={selectedModel}\n                    selectedRun={selectedRun}\n                    onModelSelected={model => setSelectedModelKey(model.key)}\n                    onRunSelected={run => setSelectedRunId(run.id)} />\n            )}\n        </div>\n    );\n};\n\nexport default ViewerContainer;\n","import { CssBaseline } from \"@material-ui/core\";\nimport { makeStyles, ThemeProvider } from \"@material-ui/core/styles\";\nimport React from \"react\";\nimport Theme from \"../theme\";\nimport ViewerContainer from \"./Viewer/ViewerContainer\";\n\nconst useStyles = makeStyles(() => ({\n    root: {\n        minHeight: \"100vh\",\n        display: \"flex\",\n        flexDirection: \"column\"\n    }\n}));\n\nconst App: React.FC = () => {\n    const classes = useStyles();\n\n    return (\n        <ThemeProvider theme={Theme}>\n\n            <div className={classes.root}>\n\n                <CssBaseline />\n\n                <ViewerContainer />\n\n            </div>\n\n        </ThemeProvider>\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}